module ch01 where

-- Exercise 1.1. Given functions f : A → B and g : B → C,
-- define their composite g ◦ f : A → C.
-- Show that we have h ◦ ( g ◦ f ) ≡ ( h ◦ g ) ◦ f .
o (A B C : U) (g : B -> C) (f : A -> B) (x : A) : C = g (f x)

oassoc (A B C D : U) (h : C -> D) (g : B -> C) (f : A -> B) :
       -- A -> D = o A C D h (o A B C g f)
       -- A -> D = o A B D (o B C D h g) f
       PathP (<_> A -> D) (o A C D h (o A B C g f)) (o A B D (o B C D h g) f)
       = <i> (o A C D h (o A B C g f))

-- Exercise 1.2. Derive the recursion principle for products rec A × B
-- using only the projections, and verify that the definitional equalities
-- are valid. Do the same for Σ-types.

recsigma (A C : U) (B : A -> U) (g : (x : A) -> B x -> C) (p : (x : A) * B x) : C = g p.1 p.2

recsigmabeta (A C : U) (B : A -> U) (g : (x : A) -> B x -> C)
           (p : (x : A) * B x) : PathP (<_> C) (recsigma A C B g p) (g p.1 p.2) = <i> g p.1 p.2

-- Exercise 1.3. Derive the induction principle for products ind A × B ,
-- using only the projections and the propositional uniqueness principle uniq A × B .
-- Verify that the definitional equalities are valid.
-- Generalize uniq A × B to Σ-types, and do the same for Σ-types.

indsigma (A : U) (B : A -> U) (C: ((x : A) * B x) -> U)
         (g : (a : A) -> (b : B a) -> C (a,b))
         (p : (x : A) * B x)
         : C p = g p.1 p.2

indsigmabeta (A : U) (B : A -> U) (C: ((x : A) * B x) -> U)
           (g : (a : A) -> (b : B a) -> C (a,b))
           (p : (x : A) * B x)
           : PathP (<_> C p) (indsigma A B C g p) (g p.1 p.2)
           = <i> g p.1 p.2

-- Exercise 1.4. Assuming as given only the iterator for natural numbers
-- derive a function having the type of the recursor rec N .
-- Show that the defining equations of the
-- recursor hold propositionally for this function,
-- using the induction principle for N.

data Nat = zero | succ (n : Nat)

const (A B: U) (a: A) : U = B

recN (C : U) (c0 : C) (cs : Nat -> C -> C) : Nat -> C = split
     zero -> c0
     succ n -> cs n (recN C c0 cs n)

iter (C : U) (c0 : C) (cs : C -> C) : Nat -> C = split
     zero -> c0
     succ n -> cs (iter C c0 cs n)

recN'' (C : Nat -> U) (c0 : C zero) (cs : (n : Nat) -> C n -> C (succ n)) (n : Nat)
       : (x : Nat) * C x
       = iter ((x : Nat) * C x) c0' cs' n where
       c0' : (x : Nat) * C x = (zero, c0)
       cs' : ((x : Nat) * C x) -> ((x : Nat) * C x)
           = \(p : (x : Nat) * C x) -> (succ p.1, cs p.1 p.2)

recN''_id (C : Nat -> U) (c0 : C zero) (cs : (n : Nat) -> C n -> C (succ n))
          : (n : Nat) -> PathP (<_> Nat) (recN'' C c0 cs n).1 n = split
          zero -> <i> zero
          succ n -> <i> succ ((recN''_id C c0 cs n) @ i)

recN' (C : U) (c0 : C) (cs : Nat -> C -> C) (n : Nat) : C = (recN'' (const Nat C) c0 cs n).2

rec_zero (C : U) (c0 : C) (cs : Nat -> C -> C) : PathP (<_> C) (recN' C c0 cs zero) c0 = <i> c0

rec_succ (C : U) (c0 : C) (cs : Nat -> C -> C) (n : Nat)
         : PathP (<_> C) (recN' C c0 cs (succ n)) (cs n (recN' C c0 cs n))
         = <i> help ((recN''_id (const Nat C) c0 cs n) @ i) where
         help (x : Nat) : C = cs x (recN' C c0 cs n)
